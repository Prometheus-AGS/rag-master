# Project Guidelines for Windsurf Code Generation

## Project Configuration
- Yarn is the package manager for this project

## Technology Stack
- React 19, Vite 6, Zustand, Zod
- Shadcn-UI for User Interface
- Monorepo structure with shared code:
  - Mobile and Desktop using Tauri
  - Web using React/Vite
  - Backend in Rust as proxy to outside world

## TypeScript Rules
- No use of `any` type explicitly or implicitly
- Strongly typed properties and function parameters
- Components must use hooks to interact with stores

## Rust Language Rules
- Follow Rust best practices
- Keep code short (10-30 lines max)
- Handle errors properly:
  - Avoid `unwrap()` and `expect()` in production
  - Use `match`, `if let`, or `?` for error handling
  - Document any use of `unwrap()`
- Use `.into()` with clear type conversions
- Verify APIs with context7 or tavily
- Double-check bug fixes
- Reuse existing types when possible
- Favor simpler code solutions

## UI/UX Rules
- Reference `docs/*` for specifications
- Research UI design with tavily
- Create simple, flat interfaces with subtle visual cues
- Implement both mobile and desktop versions
- Use meaningful animations for direction and focus

## Database Modeling
- For metadata-driven models:
  - UUID primary keys
  - Type and entity tables
  - JSON Schema validation
  - Automatic timestamp updates
  - RLS security policies

## Global Rules
- Keep files under 500 lines
- Use CLEAN architecture
- Validate with context7 or tavily
- Track problem-solving with MCP memory
- Use sequential thinking for complex problems
- Document successful implementations
