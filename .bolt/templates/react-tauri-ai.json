{
  "id": "react-tauri-ai",
  "name": "React + Tauri + AI Application",
  "description": "Full-stack application with React frontend, Tauri for cross-platform deployment, and integrated AI capabilities",
  "version": "1.0.0",
  "features": [
    {
      "id": "cross-platform-ui",
      "name": "Cross-Platform UI Components",
      "description": "Responsive UI components that work across desktop, web, and mobile",
      "required": true
    },
    {
      "id": "tauri-backend",
      "name": "Tauri Rust Backend",
      "description": "Rust-based backend services with Tauri integration",
      "required": true
    },
    {
      "id": "ai-copilot",
      "name": "AI Assistant Integration",
      "description": "Built-in AI assistant using CoPilotKit",
      "required": true
    },
    {
      "id": "theme-support",
      "name": "Light/Dark Theme Support",
      "description": "Automatic and manual theme switching capabilities",
      "required": true
    },
    {
      "id": "state-management",
      "name": "Zustand State Management",
      "description": "Global state management with Zustand",
      "required": true
    }
  ],
  "fileStructure": {
    "src": {
      "description": "React application source code",
      "components": {
        "description": "Reusable UI components"
      },
      "hooks": {
        "description": "Custom React hooks that encapsulate business logic and state management"
      },
      "pages": {
        "description": "Page-level components representing different screens"
      },
      "layouts": {
        "description": "Layout components that define page structure"
      },
      "stores": {
        "description": "Zustand stores for state management"
      },
      "types": {
        "description": "TypeScript type definitions"
      },
      "utils": {
        "description": "Utility functions and helpers"
      },
      "lib": {
        "description": "Shared libraries and configurations"
      },
      "styles": {
        "description": "Global styles and CSS utilities"
      }
    },
    "src-tauri": {
      "description": "Tauri and Rust backend code",
      "src": {
        "description": "Rust source code for the Tauri application"
      },
      "capabilities": {
        "description": "Tauri capability configurations"
      }
    },
    "apps": {
      "description": "Additional applications and services",
      "webserver": {
        "description": "Rust-based web server",
        "src": {
          "description": "Rust source code for the web server"
        }
      },
      "ai-service": {
        "description": "AI service integration code"
      },
      "node-ai-service": {
        "description": "Node.js implementation of AI services"
      }
    },
    "docs": {
      "description": "Project documentation and specifications"
    },
    "scripts": {
      "description": "Build and development scripts"
    }
  },
  "codeExamples": {
    "componentStructure": "import React from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport type { ComponentProps } from '../types/component-types';\n\ninterface ExampleProps extends ComponentProps {\n  title: string;\n  description?: string;\n}\n\nexport function ExampleComponent({\n  title,\n  description,\n  className,\n}: ExampleProps) {\n  const { theme } = useTheme();\n  \n  return (\n    <div className={className}>\n      <h2>{title}</h2>\n      {description && <p>{description}</p>}\n    </div>\n  );\n}",
    "storeSetup": "import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface AppState {\n  isLoading: boolean;\n  setLoading: (isLoading: boolean) => void;\n}\n\nexport const useAppStore = create<AppState>(\n  persist(\n    (set) => ({\n      isLoading: false,\n      setLoading: (isLoading: boolean) => set({ isLoading }),\n    }),\n    {\n      name: 'app-storage',\n    }\n  )\n);",
    "tauriCommands": "// In src-tauri/src/lib.rs\nuse tauri::command;\n\n#[command]\npub fn greet(name: &str) -> String {\n    format!(\"Hello, {}! You've been greeted from Rust!\", name)\n}\n\n// In src/utils/tauri-api.ts\nimport { invoke } from '@tauri-apps/api/tauri';\n\nexport async function greet(name: string): Promise<string> {\n  return invoke('greet', { name });\n}"
  },
  "dependencies": {
    "frontend": [
      "react",
      "react-dom",
      "zustand",
      "zod",
      "shadcn-ui",
      "copilotkit",
      "tailwindcss",
      "@tauri-apps/api"
    ],
    "backend": [
      "tauri",
      "serde",
      "tokio"
    ]
  },
  "devDependencies": {
    "frontend": [
      "vite",
      "typescript",
      "@types/react",
      "@types/react-dom"
    ],
    "backend": [
      "rust-analyzer",
      "cargo"
    ]
  },
  "scripts": [
    {
      "name": "dev",
      "command": "yarn tauri dev",
      "description": "Start the development server with Tauri"
    },
    {
      "name": "build",
      "command": "yarn tauri build",
      "description": "Build the production application for desktop platforms"
    },
    {
      "name": "web:dev",
      "command": "yarn dev",
      "description": "Start the web development server without Tauri"
    },
    {
      "name": "web:build",
      "command": "yarn build",
      "description": "Build the web version of the application"
    }
  ]
}
